- name: Installer cryptography et pyopenssl (pour le certificat)
  become: true
  pip:
    executable: pip3
    name: 
      - cryptography==41.0.7 
      - pyopenssl==24.1.0
    state: present
      
- name: "Ajout du fichier temporaire .env dans le répertoire '{{ appsDir }}/{{ gitDir }}'"
  template:
    src: "files/env.example"
    dest: "{{ appsDir }}/{{ gitDir }}/.env"

- name: "Copie chatbot-back"
  synchronize:
    src: '{{ appsDir }}/{{ gitDir }}/{{ backDir }}'
    dest: '{{ appsDir }}'
  delegate_to: '{{ inventory_hostname }}'

- name: "Ajout du fichier .env dans le répertoire '{{ appsDir }}/{{ backDir }}'"
  copy:
    remote_src: yes
    src: '{{ appsDir }}/{{ gitDir }}/.env'
    dest: '{{ appsDir }}/{{ backDir }}/.env'

- name: "Copie chatbot-front"
  synchronize:
    src: '{{ appsDir }}/{{ gitDir }}/{{ frontDir }}/dist/{{ frontDir }}'
    dest: '{{ appsDir }}'
  delegate_to: '{{ inventory_hostname }}'

- name: "Copie webchat"
  synchronize:
    src: '{{ appsDir }}/{{ gitDir }}/{{ frontDir }}/dist/{{ webchatDir }}'
    dest: '{{ appsDir }}'
  delegate_to: '{{ inventory_hostname }}'

- name: "Copie chatbot-template"
  synchronize:
    src: '{{ appsDir }}/{{ gitDir }}/{{ botDir }}'
    dest: '{{ appsDir }}'
  delegate_to: '{{ inventory_hostname }}'

# - name: Copie env-file ter
#   copy:
#     remote_src: yes
#     src: '{{ appsDir }}/{{ gitDir }}/.env'
#     dest: '{{ appsDir }}/{{ botDir }}/.env'

- name: Vérification si le certif BDD existe
  delegate_to: 'localhost'
  stat:
    path: '/usr/local/share/ca-certificates/postgres.crt'
  register: db_cert

# - name: Ajout du certificat BDD
#   become: yes
#   copy:
#     src: '/usr/local/share/ca-certificates/postgres.crt'
#     dest: '/usr/local/share/ca-certificates/postgres.crt'
#   when: db_cert.stat.exists

- name: add server name to the nginx site config file
  lineinfile:
    path: '/etc/nginx/conf.d/default.conf'
    insertbefore : '^    location / {'
    line: '    server_name  {{ botDomain }};'  
  become: yes

- name: "Ouverture du port 80 avant contrôle du certificat SSL"
  become: yes
  ufw:
    rule: allow
    port: '80'
    proto: tcp 

- name: "Installer un certificat SSL sur un serveur Nginx."
  become: yes
  command: certbot --nginx -d {{ botDomain }} -n --redirect --agree-tos -m {{ ssl_notification_email }}

- name: "Fermeture du port 80 après contrôle du certificat SSL"
  become: yes
  ufw:
    rule: deny
    port: '80'
    proto: tcp  

- name: "Auto renew SSL certificate"
  become: yes
  cron:
    name: "certbot renew"
    minute: "0"
    hour: "0"
    month: "1"
    job: 'certbot renew --pre-hook "ufw allow 80/tcp" --post-hook "ufw deny 80/tcp"'

- name: Update nginx site conf to use http2
  become: true
  lineinfile:
    path: '/etc/nginx/conf.d/default.conf'
    regexp: '^    listen \[::]:443 ssl ipv6only=on;'
    line: '    listen [::]:443 ssl http2 ipv6only=on;'

- name: Update nginx site conf to use http2
  become: true
  lineinfile:
    path: '/etc/nginx/conf.d/default.conf'
    regexp: '^    listen 443 ssl;'
    line: '    listen 443 ssl http2;'

- name: Update certbot conf to use TLS 1.2
  become: true
  lineinfile:
    path: '/etc/letsencrypt/options-ssl-nginx.conf'
    regexp: '^ssl_protocols TLSv1 TLSv1.1 TLSv1.2;'
    line: 'ssl_protocols TLSv1.2 TLSv1.3;'

- name: "npm install chatbot-back"
  command:
    cmd: npm install
    chdir: '{{ appsDir }}/{{ backDir }}'

- name: "npm build chatbot-back"
  command:
    cmd: 'npm run build'
    chdir: '{{ appsDir }}/{{ backDir }}'

- name: "npm copy env file"
  command:
    cmd: 'npm run copy'
    chdir: '{{ appsDir }}/{{ backDir }}'

- name: "Création du répertoire mediatheque"
  become: yes
  file:
    path: '{{ appsDir }}/{{ backDir }}/mediatheque'
    state: directory
    owner: '{{ script_user }}'
    group: www-data
    mode: '751'

- name: "Création du répertoire historic"
  become: yes
  file:
    path: '{{ appsDir }}/{{ backDir }}/historic'
    state: directory
    owner: '{{ script_user }}'
    group: www-data
    mode: '751'

# - name: Installer ts-node
#   npm:
#     path: '{{ appsDir }}/{{ backDir }}/'  # Chemin absolu vers votre projet
#     name: ts-node

# - name: Création de la BDD si nécessaire
#   become: yes
#   shell: |
#     export DATABASE_USER={{ envFile_database_user }}
#     export DATABASE_PASSWORD={{ envFile_database_password }}
#     export DATABASE_HOST={{ envFile_dataBase_host }}
#     export DATABASE_PORT={{ envFile_database_port }}
#     export DATABASE_NAME={{ envFile_database_name }}
#     ./node_modules/.bin/ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js migration:run --config ./src/ormconfig.ts?sslmode=require
#   args:
#     chdir: '{{ appsDir }}/{{ backDir }}/'

- name: "NODE | Stop APP"
  shell: pm2 stop ChatbotBack
  args:
    chdir: '{{ appsDir }}/{{ backDir }}'
  ignore_errors: yes

- name: "NODE | Start APP"
  shell: pm2 start main.js --name ChatbotBack
  args:
    chdir: '{{ appsDir }}/{{ backDir }}/dist'

#- name: Mise à jour du script de PM2 pour se relancer au reboot du serveur
#  become: true
#  shell: 'env PATH=$PATH:/usr/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup systemd -u chatbot_user --hp /home/chatbot_user'

- name: Modifier le fichier endpoints.yml de Rasa
  template:
    src: 'files/endpoints.template.yml'
    dest: '{{ appsDir }}/{{ botDir }}/endpoints.yml'

#- name: Train rasa
#  command:
#    chdir: '{{ appsDir }}/{{ botDir }}/'
#    cmd: 'rasa train --num-threads 8'

#- name: Stop rasa chatbot
#  command: 'pkill screen'
#  ignore_errors: true

- name: copy rc.local file to restart bot on boot
  become: true
  copy:
    src: '../files/rc.local'
    dest: '/etc/rc.local'

- name: Set right rights on rc.local file
  become: true
  file:
    path: '/etc/rc.local'
    mode: '755'

- name: Savoir si le répertoire models est vide.
  find:
    paths: "{{ appsDir }}/{{ botDir }}/models"
    file_type: file
  register: models_files

- name: Lancement d'un entrainement RASA sans modèle existant.
  command:
    chdir: '{{ appsDir }}/{{ botDir }}/'
    cmd: 'rasa train --augmentation 0'
  when: models_files.matched == 0

- name: Lancement d'un entrainement RASA avec modèle existant.
  command:
    chdir: '{{ appsDir }}/{{ botDir }}/'
    cmd: 'rasa train --finetune --epoch-fraction 0.2 --num-threads 8'
  when: models_files.matched != 0

- name: Désactivation de la telemetry.
  command:
    chdir: '{{ appsDir }}/{{ botDir }}/'
    cmd: 'rasa telemetry disable'

- name: Tue les screen existant.
  args: 
    chdir: '{{ appsDir }}/{{ botDir }}/'
  shell: pkill screen
  ignore_errors: yes

- name: Start rasa chatbot models. 
  args: 
    chdir: '{{ appsDir }}/{{ botDir }}/'
  shell: |
        screen -S rasa -dmS rasa run -m models --log-file out.log --cors "*" --debug

- name: Start rasa chatbot actions.
  args: 
    chdir: '{{ appsDir }}/{{ botDir }}/'
  shell: |
        screen -S rasa-action -dmS rasa run actions

#- name: copy files for bot
#  ignore_errors: true
#  copy:
#    src: '{{ item.src }}'
#    dest: '{{ item.dest }}'
#  with_items:
#    - { src: 'roles/chatbotGeneration/files/rc.local', dest: '{{ gitDir }}/rc.local' }
#    - { src: 'roles/chatbotGeneration/files/nginx_rhel.conf', dest: '{{ gitDir }}/nginx.conf' }
#    - { src: 'roles/chatbotGeneration/files/nginx_conf.cfg', dest: '{{ gitDir }}/nginx_conf.cfg' }
#    - { src: 'roles/chatbotGeneration/files/.env', dest: '{{ gitDir }}/.env' }
#  become: yes
