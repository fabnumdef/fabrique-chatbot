- name: "apt: 'Update' et 'upgrade'"
  become: true
  apt:
    upgrade: 'yes'
    update_cache: 'yes'

- name: "Ajout de dépendance pour NODE.JS"
  become: yes
  apt:
    pkg:
      - curl
      - software-properties-common
      - gnupg

- name: "Installation de la clé GPG pour NODE.JS"
  become: yes
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key"
    state: present

- name: "Installation de NODE.JS {{ nodejs_version }}"
  become: yes
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }}.x nodistro main"
    state: present
    update_cache: yes

- name: Installer git
  become: yes
  package:
    name: git
    state: present

- name: Cloner le dépôt pyenv depuis GitHub
  git:
    repo: https://github.com/pyenv/pyenv.git
    dest: ~/.pyenv
    version: master
    update: yes

- name: Installer les dépendances requises pour pyenv
  become: yes
  package:
    name: ['make', 'build-essential', 'libssl-dev', 'zlib1g-dev', 'libbz2-dev', 'libreadline-dev', 'libsqlite3-dev', 'wget', 'curl', 'llvm', 'libncurses5-dev', 'libncursesw5-dev', 'xz-utils', 'tk-dev', 'libffi-dev', 'liblzma-dev']

# - name: Redémarrer ~/.bashrc
#   shell: . ~/.bashrc

- name: Vérifier si Python 3.9.2 est déjà installé avec Pyenv
  command: '{{ ansible_env.HOME }}/.pyenv/versions/3.9.2/bin/python --version'
  register: python_version_check
  ignore_errors: yes

- name: Installer Python 3.9.2 avec pyenv si non installé
  when: python_version_check.rc != 0
  shell: '{{ ansible_env.HOME }}/.pyenv/bin/pyenv install 3.9.2'

- name: Définir Python 3.9.2 comme version globale avec pyenv
  shell: '{{ ansible_env.HOME }}/.pyenv/bin/pyenv global 3.9.2'
   
# - name: Installer libssl1.1
#   ansible.builtin.package:
#     name: 
#       - libssl1.1
#     state: present

- name: "Installation de NGINX"
  include_role:
    name: nginx
  vars:
    ansible_python_interpreter: "{{ ansible_env.HOME }}/.pyenv/versions/3.9.2/bin/python3.9"

- name: "Installation des autres dépendances (python, ssl, postgresql, node ...)"
  become: true
  apt:
    pkg:
      - python3-pip
      - libssl-dev
      - bash
      - openssl
      - python3-dev
      # - python-setuptools
      - libpq-dev
      - python3-psycopg2
      - acl
      - nodejs
      - git
      - screen
      - rsync
      - certbot
      - snapd
      - clamav
      - clamav-daemon
      - sshpass
  # vars:
  #   ansible_python_interpreter: "{{ ansible_env.HOME }}/.pyenv/versions/3.9.2/bin/python3.9"

- name: "Copie du fichier de configuration nginx"
  copy:
    src: 'roles/chatbotConfiguration/files/nginx.conf'
    dest: '/etc/nginx/nginx.conf'
  become: yes

- name: "Création d'un dossier pour les fichiers infectés"
  file:
    path: /root/quarantine
    state: directory
  become: yes

- name: "Exclusion des répertoires spéciaux de linux pour l'antivirus"
  command:
    cmd: 'printf "ExcludePath ^/proc\nExcludePath ^/sys\nExcludePath ^/run\nExcludePath ^/dev\nExcludePath ^/snap\nExcludePath ^/var/lib/lxcfs/cgroup\nExcludePath ^/root/quarantine\n" | sudo tee -a /etc/clamav/clamd.conf'
  become: yes

- name: "Redémarrage de l'antivirus"
  service:
    name: clamav-daemon
    state: restarted
  become: yes

- name: "Lancement d'un scan complet antivirus toutes les semaines"
  command:
    cmd: 'echo "0 1 * * 0 root /usr/bin/clamdscan -m --fdpass --log=/var/log/clamav/clamdscan.log --move=/root/quarantine /" | tee /etc/cron.d/clamdscan'
  become: yes

- name: "Mise en place des droits 774 pour le répertoire appsDir"
  become: true
  file:
    path: '{{appsDir}}'
    group: www-data
    mode: '774'
    recurse: yes

- name: "Install last version of pip"
  become: true
  pip:
    executable: pip3
    name: pip
    extra_args: -U

- name: "Install RASA & Ansible"
  become: true
  pip:
    executable: pip3
    extra_args: --ignore-installed
    name:
      - rasa==3.3.0
      - rasa-sdk==3.3.0
      - psycopg2==2.9.6
      - websockets==10.4
      - python-socketio==5.7.2
      - ansible

- name: "NODE | Install pm2"
  become: yes
  npm:
    name: pm2
    global: yes
    production: yes
    state: present

- name: "Copie de la configuration du site statique nginx"
  copy:
    src: 'roles/chatbotConfiguration/files/nginx_conf.cfg'
    dest: '/etc/nginx/conf.d/default.conf'
  become: yes

- name: "restart nginx"
  service:
    name: nginx
    state: restarted
  become: yes
