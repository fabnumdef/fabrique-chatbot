- name: Configuration pour OS Debian
  include_tasks: debian.yml
  when: ansible_distribution == 'Debian'

- name: Configuration pour OS RHEL 8 & CentOS 8
  include_tasks: rhel.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == "RedHat"

- name: Installation de la dernière version de pip
  become: true
  pip:
    executable: pip3
    name: pip
    extra_args: -U

- name: NODE | Installation pm2
  ignore_errors: yes
  become: yes
  npm:
    name: pm2
    global: yes
    production: yes
    state: present

- name: Copie du fichier de conf nginx
  become: yes
  copy:
    src: 'roles/usineConfiguration/files/nginx.conf'
    dest: '/etc/nginx/nginx.conf'
#    remote_src: yes

- name: Copie du fichier de conf site statique nginx
  copy:
    src: 'roles/usineConfiguration/files/static_site.cfg'
    dest: '/etc/nginx/conf.d/default.conf'
#    remote_src: yes
  become: yes

- name: Redémarrage nginx
  service:
    name: nginx
    state: restarted
  become: yes

- name: Liste des fichiers à supprimer
  become: yes
  find:
    path: '{{ appsDir }}/{{ nestDir }}/'
    file_type: any
    excludes: 'node_modules,chatbot'
  register: files_to_delete

- name: Suppression de l'ancienne application NestJS
  become: yes
  file:
    path: '{{ item.path }}'
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: Copie de l'application NestJS
  copy:
    src: '{{ appsDir }}/{{ gitDir }}/{{ usineDir }}/back/'
    dest: '{{ appsDir }}/{{ nestDir }}'

- name: Copie du fichier .env
  copy:
    src: '~/ansible/roles/usineConfiguration/files/.env'
    dest: '{{ appsDir }}/{{ nestDir }}/.env'

- name: Suppression de l'ancienne application Angular
  file:
    path: '{{ appsDir }}/{{ angularDir }}/'
    state: absent
  become: yes

- name: Copie de l'application Angular
  copy:
    src: '{{ appsDir }}/{{ gitDir }}/{{ usineDir }}/front/dist/{{ angularDir }}'
    dest: '{{ appsDir }}'

- name: Vérification si le certif BDD existe
  stat:
    path: '../files/postgres.crt'
  register: db_cert

- name: Ajout du certificat BDD
  become: yes
  copy:
    src: '../files/postgres.crt'
    dest: '/usr/local/share/ca-certificates/postgres.crt'
  when: db_cert.stat.exists

- name: Open port 80 before check SSL certificate
  become: yes
  ufw:
    rule: allow
    port: '80'
    proto: tcp

- name: Install SSL certificate
  become: yes
  command:
    cmd: 'certbot --nginx -d {{ DOMAIN }} -n --redirect --agree-tos -m vincent.laine@beta.gouv.fr'
  when: DOMAIN is defined and DOMAIN != ""

- name: Close port 80 after SSL certificate
  become: yes
  when: DOMAIN is defined and DOMAIN != ""
  ufw:
    rule: deny
    port: '80'
    proto: tcp

- name: Update nginx site conf to use http2
  become: true
  when: DOMAIN is defined and DOMAIN != ""
  lineinfile:
    path: '/etc/nginx/conf.d/default.conf'
    regexp: '^    listen 443 ssl;'
    line: '    listen 443 ssl http2;'

- name: Update certbot conf to use TLS 1.2
  become: true
  when: DOMAIN is defined and DOMAIN != ""
  lineinfile:
    path: '/etc/letsencrypt/options-ssl-nginx.conf'
    regexp: '^ssl_protocols TLSv1 TLSv1.1 TLSv1.2;'
    line: 'ssl_protocols TLSv1.2 TLSv1.3;'

- name: restart nginx
  service:
    name: nginx
    state: restarted
  become: yes

- name: Installation des paquets de l'application NestJS
  become: yes
  npm:
    path: '{{ appsDir }}/{{ nestDir }}'

- name: Build de l'application NestJS
  become: yes
  command:
    cmd: 'npm run build'
    chdir: '{{ appsDir }}/{{ nestDir }}'

- name: Copie du fichier d'environnement vers le projet buildé
  become: yes
  command:
    cmd: 'npm run copy'
    chdir: '{{ appsDir }}/{{ nestDir }}'

- name: NODE | Stop APP
  shell: pm2 stop FabriqueBack
  args:
    chdir: '{{ appsDir }}/{{ nestDir }}'
  ignore_errors: yes

- name: NODE | Start APP
  shell: pm2 start main.js --name FabriqueBack --update-env
  args:
    chdir: '{{ appsDir }}/{{ nestDir }}/dist'

#- name: Update PM2 script at startup
#  shell: pm2 startup
#
#- name: reload pm2 startup script
#  systemd:
#    name: pm2-root.service
#    state: reloaded
