- name: Configuration pour OS Debian
  include_tasks: debian.yml
  when: ansible_distribution == 'Debian'

- name: Configuration pour OS RHEL 8 & CentOS 8
  include_tasks: rhel.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == "RedHat"

- name: Install last version of pip
  become: true
  pip:
    executable: pip3
    name: pip
    extra_args: -U

- name: Ansible galaxy install elastic.beats role
  shell: 'ansible-galaxy install elastic.beats,v7.10.1'

- name: copy the nginx config file
  become: yes
  copy:
    src: 'roles/usineConfiguration/files/nginx_rhel.conf'
    dest: '/etc/nginx/nginx.conf'
#    remote_src: yes

- name: copy the nginx site config file
  copy:
    src: 'roles/usineConfiguration/files/static_site.cfg'
    dest: '/etc/nginx/conf.d/default.conf'
#    remote_src: yes
  become: yes

- name: restart nginx
  service:
    name: nginx
    state: restarted
  become: yes

- name: Open port 80 before check SSL certificate
  become: yes
  ufw:
    rule: allow
    port: '80'
    proto: tcp

- name: Install SSL certificate
  become: yes
  command:
    cmd: 'certbot --nginx -d {{ DOMAIN }} -n --redirect --agree-tos -m vincent.laine@beta.gouv.fr'
  when: DOMAIN is defined and DOMAIN != ""

- name: Close port 80 after SSL certificate
  become: yes
  when: DOMAIN is defined and DOMAIN != ""
  ufw:
    rule: deny
    port: '80'
    proto: tcp

- name: Update nginx site conf to use http2
  become: true
  when: DOMAIN is defined and DOMAIN != ""
  lineinfile:
    path: '/etc/nginx/conf.d/default.conf'
    regexp: '^    listen 443 ssl;'
    line: '    listen 443 ssl http2;'

- name: Update certbot conf to use TLS 1.2
  become: true
  when: DOMAIN is defined and DOMAIN != ""
  lineinfile:
    path: '/etc/letsencrypt/options-ssl-nginx.conf'
    regexp: '^ssl_protocols TLSv1 TLSv1.1 TLSv1.2;'
    line: 'ssl_protocols TLSv1.2 TLSv1.3;'

- name: restart nginx
  service:
    name: nginx
    state: restarted
  become: yes

- name: NODE | Install pm2
  ignore_errors: yes
  become: yes
  npm:
    name: pm2
    global: yes
    production: yes
    state: present

- name: Ensure the PostgreSQL service is running
  service:
    name: 'postgresql'
    state: 'started'
    enabled: 'yes'

- name: Ensure database is created
  become: yes
  become_user: postgres
  postgresql_db:
    name: 'fabrique_chatbot'
    encoding: 'UTF-8'
    lc_collate: 'fr_FR.UTF-8'
    lc_ctype: 'fr_FR.UTF-8'
    #        conn_limit: '100' # Only available in ansible 2.8
    state: 'present'
    template: 'template0'

- name: Ensure user has access to the database
  become: true
  become_user: postgres
  postgresql_user:
    db: 'fabrique_chatbot'
    name: 'fabrique_chatbot_user'
    password: '{{ DB_PASSWORD }}'
    priv: 'ALL'
    state: 'present'

- name: Ensure user does not have unnecessary privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: 'fabrique_chatbot_user'
    role_attr_flags: 'NOSUPERUSER,NOCREATEDB'
    state: 'present'

- name: Ensures {{ userDir }}/{{ nestDir }} dir exists
  file:
    path: '{{ userDir }}/{{ nestDir }}'
    state: directory

- name: Copy env file
  copy:
    src: 'roles/usineConfiguration/files/.env'
    dest: '{{ userDir }}/{{ nestDir }}/.env'

- name: Get list of files to delete
  become: yes
  find:
    path: '{{ appsDir }}/{{ nestDir }}/'
    file_type: any
    excludes: 'node_modules,chatbot'
  register: files_to_delete

- name: remove old nestjs app
  become: yes
  file:
    path: '{{ item.path }}'
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: copy nestjs app
  copy:
    src: '{{ userDir }}/{{ nestDir }}/'
    dest: '{{ appsDir }}/{{ nestDir }}'
  become: yes

#- name: copy angular app
#  copy:
#    #    src: '{{ userDir }}/{{ nestDir }}/'
#    src: '../front/dist/{{ angularDir }}'
#    dest: '{{ appsDir }}/{{ angularDir }}'
#  become: yes

- name: npm install nestjs app
  become: yes
  npm:
    path: '{{ appsDir }}/{{ nestDir }}'

- name: npm build nestjs app
  become: yes
  command:
    cmd: 'npm run build'
    chdir: '{{ appsDir }}/{{ nestDir }}'

- name: npm copy env file
  become: yes
  command:
    cmd: 'npm run copy'
    chdir: '{{ appsDir }}/{{ nestDir }}'

- name: Changement de droits sur le dossier du back
  become: true
  file:
    path: '{{ appsDir }}/{{ nestDir }}'
    mode: '774'
    recurse: yes

- name: NODE | Stop APP
  shell: pm2 stop FabriqueBack
  args:
    chdir: '{{ appsDir }}/{{ nestDir }}'
  ignore_errors: yes

- name: NODE | Start APP
  shell: pm2 start main.js --name FabriqueBack
  args:
    chdir: '{{ appsDir }}/{{ nestDir }}/dist'

#- name: Update PM2 script at startup
#  shell: pm2 startup
#
#- name: reload pm2 startup script
#  systemd:
#    name: pm2-root.service
#    state: reloaded
