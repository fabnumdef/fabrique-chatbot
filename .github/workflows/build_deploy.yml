name: Build & Deploy
on:
  push:
    tags:
      - '*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set env to dev
        if: endsWith(github.ref, '-beta')
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - name: Set env to prod
        if: endsWith(github.ref, '-prod')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - uses: actions/checkout@v1

      - uses: haya14busa/action-cond@v1
        id: host
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ${{ secrets.PROD_IP }}
          if_false: ${{ secrets.DEV_IP }}

      - uses: haya14busa/action-cond@v1
        id: branch
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: master
          if_false: develop

      - uses: haya14busa/action-cond@v1
        id: vault_password
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ${{ secrets.PROD_VAULT_PASSWORD }}
          if_false: ${{ secrets.DEV_VAULT_PASSWORD }}

      - uses: haya14busa/action-cond@v1
        id: user_password
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ${{ secrets.PROD_USER_PASSWORD }}
          if_false: ${{ secrets.DEV_USER_PASSWORD }}

      - uses: haya14busa/action-cond@v1
        id: db_password
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ${{ secrets.PROD_DB_PASSWORD }}
          if_false: ${{ secrets.DEV_DB_PASSWORD }}

      - uses: haya14busa/action-cond@v1
        id: db_cert
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ${{ secrets.PROD_DB_CERT }}
          if_false: ${{ secrets.DEV_DB_CERT }}

      - uses: haya14busa/action-cond@v1
        id: env_file
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: ~/ansible/roles/usineConfiguration/files/.env.prod
          if_false: ~/ansible/roles/usineConfiguration/files/.env.dev

      - uses: haya14busa/action-cond@v1
        id: domain
        with:
          cond: ${{ env.ENVIRONMENT == 'prod' }}
          if_true: chatbot.fabnum.fr
          if_false: chatbot.dev.fabnum.fr

      - name: copy ansible scripts via ssh key
        uses: appleboy/scp-action@master
        with:
          HOST: '${{ steps.host.outputs.value }}'
          USERNAME: ansible
          PORT: 22
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./ansible/"
          target: "~/"
          timeout: 120s

      - name: launch deploy ansible script
        uses: appleboy/ssh-action@master
        with:
          HOST: '${{ steps.host.outputs.value }}'
          USERNAME: ansible
          PORT: 22
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ~/ansible/roles/vars/password_file
            rm -rf ~/ansible/roles/usineConfiguration/files/postgres.crt
            cat >> ~/ansible/roles/vars/password_file << 'END'
            ${{ steps.vault_password.outputs.value }}
            END
            cat >> ~/ansible/roles/usineConfiguration/files/postgres.crt << 'END'
            ${{ steps.db_cert.outputs.value }}
            END
            ansible-vault decrypt --vault-password-file ~/ansible/roles/vars/password_file ${{ steps.env_file.outputs.value }}
            mv ${{ steps.env_file.outputs.value }} ~/ansible/roles/usineConfiguration/files/.env
            ansible-playbook ~/ansible/playUsineupdaterepos.yml --extra-vars 'USER_PASSWORD='"${{ steps.user_password.outputs.value }}"' usineBranch='${{ steps.branch.outputs.value }}''
            ansible-playbook ~/ansible/playUsineconfiguration.yml --vault-password-file ~/ansible/roles/vars/password_file --extra-vars 'DB_PASSWORD='"${{ steps.db_password.outputs.value }}"' USER_PASSWORD='"${{ steps.user_password.outputs.value }}"' ansible_become_password='"${{ steps.user_password.outputs.value }}"' DOMAIN='${{ steps.domain.outputs.value }}''

      - name: delete tmp dir
        uses: appleboy/ssh-action@master
        with:
          HOST: '${{ steps.host.outputs.value }}'
          USERNAME: ansible
          PORT: 22
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          script:
            rm -rf ~/ansible/
